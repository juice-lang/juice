// include/juice/Driver/Diagnostics.def - Defines diagnostics that can be emitted by the compiler
//
// This source file is part of the juice open source project
//
// Copyright (c) 2019 - 2020 juice project authors
// Licensed under MIT License
//
// See https://github.com/juice-lang/juice/blob/master/LICENSE for license information
// See https://github.com/juice-lang/juice/blob/master/CONTRIBUTORS.txt for the list of juice project authors


#if !(defined(DIAG) || (defined(ERROR) && defined(WARNING) && defined(OUTPUT)))
#error Must define either DIAG or the set {ERROR, WARNING, OUTPUT}
#endif

#ifndef ERROR
#define ERROR(ID, Text, Newline) \
  DIAG(ERROR, ID, Text, Newline)
#endif

#ifndef WARNING
#define WARNING(ID, Text, Newline) \
  DIAG(WARNING, ID, Text, Newline)
#endif

#ifndef OUTPUT
#define OUTPUT(ID, Text, Newline) \
  DIAG(WARNING, ID, Text, Newline)
#endif


ERROR(invalid_diagnostic, "INTERNAL ERROR: this diagnostic should not be produced", true)

// Driver
ERROR(error_creating_temporary, "could not create temporary file '%0.o': %1", true)
ERROR(error_finding_program, "could not find program '%0' in path: %1", true)
ERROR(error_parsing_args, "error while parsing commandline arguments:\n%0", true)
ERROR(execution_failed, "execution of program '%0' failed with exit code %1", true)
ERROR(file_not_found, "no such file or directory: '%0'", true)
ERROR(file_not_regular, "'%0': is not a regular file", true)
ERROR(file_status_error, "could not get status of file '%0': %1", true)
ERROR(linker_output_to_stdout, "cannot output executable to stdout", true)
ERROR(object_to_stdout, "cannot output object file to stdout", true)

//Lexer
ERROR(expected_digit_decimal_sign, "expected a digit after decimal sign", true)
ERROR(expected_digit_exponent, "expected a digit in floating point exponent", true)
ERROR(invalid_character, "use of invalid character", true)
ERROR(invalid_escape, "invalid escape sequence in string literal", true)
ERROR(unterminated_comment, "unterminated block comment", true)
ERROR(unterminated_string, "unterminated string literal", true)

OUTPUT(lexer_token, "%0", true)

//Parser
ERROR(unexpected_parser_error, "unexpected error in parser", true)

ERROR(expected_end_of_file, "expected end of file", true)
ERROR(expected_expression, "expected expression", true)
ERROR(expected_else, "expected else block in if expression", true)
ERROR(expected_right_paren, "expected closing parenthesis after expression", true)

ERROR(unexpected_operator, "unexpected %0 precedence operator", true)

ERROR(expected_type, "expected type", true)

ERROR(expected_variable_name, "expected variable name", true)
ERROR(expected_variable_initialization, "expected initialization after variable declaration", true)

ERROR(expected_newline_or_semicolon, "expected newline or semicolon after %0 statement", true)
ERROR(expected_left_brace, "expected opening brace after '%0'", true)
ERROR(expected_right_brace, "expected closing brace after %0 block", true)

ERROR(expected_left_brace_or_colon, "expected opening brace or colon before %0 body", true)

OUTPUT(ast_end, "%0%indent1)", true)

OUTPUT(binary_operator_expression_ast_0,
       "%0BinaryOperatorExpressionAST(\n%indent1  token: %reset%2\n%0%indent1  left: ", false)
OUTPUT(binary_operator_expression_ast_1, "%0%indent1  right: ", false)

OUTPUT(integer_literal_expression_ast,
       "%0IntegerLiteralExpressionAST(\n%indent1  token: %reset%2\n%0%indent1  value: %reset%3\n%0%indent1)", true)
OUTPUT(floating_point_literal_expression_ast,
       "%0FloatingPointLiteralExpressionAST(\n%indent1  token: %reset%2\n%0%indent1  value: %reset%3\n%0%indent1)",
       true)
OUTPUT(boolean_literal_expression_ast,
       "%0BooleanLiteralExpressionAST(\n%indent1  token: %reset%2\n%0%indent1  value: %reset%3\n%0%indent1)", true)
OUTPUT(variable_expression_ast, "%0VariableExpressionAST(token: %reset%1%0)", true)

OUTPUT(variable_declaration_ast,
       "%0VariableDeclarationAST(\n%indent1  name: %reset%2\n%0%indent1  type annotation: %reset%3\n"
       "%0%indent1  mutable: %reset%4\n%0%indent1  initialization: ", false)

OUTPUT(if_expression_ast_0, "%0IfExpressionAST(\n%indent1  token: %reset%2\n%0%indent1  if condition: ", false)
OUTPUT(if_statement_ast_0, "%0IfStatementAST(\n%indent1  token: %reset%2\n%0%indent1  if condition: ", false)
OUTPUT(if_ast_1, "%0%indent1  if body: ", false)
OUTPUT(if_ast_2, "%0%indent1  elif condition: ", false)
OUTPUT(if_ast_3, "%0%indent1  elif body: ", false)
OUTPUT(if_ast_4, "%0%indent1  else body: ", false)

OUTPUT(while_statement_ast_0, "%0WhileStatementAST(\n%indent1  token: %reset%2\n%0%indent1  condition: ", false)
OUTPUT(while_statement_ast_1, "%0%indent1  body: ", false)

OUTPUT(block_ast_empty, "%0BlockAST(block: {})", true)
OUTPUT(block_ast_0, "%0BlockAST(\n%indent1  block: {", true)
OUTPUT(block_ast_1, "%indent0", false)
OUTPUT(block_ast_2, "%0%indent1})", true)

OUTPUT(if_body_ast_block, "%0IfBodyAST(\n%indent1  keyword: %reset%2\n%0%indent1  block: ", false)
OUTPUT(if_body_ast_expression, "%0IfBodyAST(\n%indent1  keyword: %reset%2\n%0%indent1  expression: ", false)

//AST
ERROR(invalid_redeclaration, "invalid redeclaration of '%0'", true)
ERROR(not_a_type, "identifier '%0' does not resolve to a type", true)
ERROR(unresolved_identifer, "use of unresolved identifier '%0'", true)

ERROR(expression_not_assignable, "expression is not assignable", true)

ERROR(expected_block_yield, "expected yield in %0 block", true)

//Sema
ERROR(module_ast_expected_type, "expected return type '%0' in module", true)
ERROR(module_ast_expected_types, "expected a return type from %0 in module", true)
ERROR(block_ast_expected_type, "expected yield of type '%0' in block", true)
ERROR(block_ast_expected_types, "expected yield of a type from %0 in block", true)

ERROR(statement_ast_expected_type, "expected type '%0', but got a non-yielding statement", true)
ERROR(statement_ast_expected_types, "expected a type from %0, but got a non-yielding statement", true)
ERROR(statement_ast_expected_unknown_type, "expected a value, but got a non-yielding statement", true)

ERROR(variable_declaration_ast_redeclaration, "invalid redeclaration of '%0'", true)

ERROR(expression_ast_expected_type, "expected type '%0', but got type '%1'", true)
ERROR(expression_ast_expected_types, "expected a type from %0, but got type '%1'", true)
ERROR(expression_ast_expected_lvalue, "expected lvalue of type '%0', but got %1", true)
ERROR(expression_ast_expected_lvalue_types, "expected lvalue of a type from %0, but got %1", true)
ERROR(expression_ast_expected_lvalue_unknown_type, "expected lvalue, but got %0", true)
ERROR(expression_ast_unresolved_identifier, "Use of unresolved identifier '%0'", true)

ERROR(floating_point_literal_expected_type, "expected type '%0', but got a floating-point literal", true)
ERROR(floating_point_literal_expected_types, "expected a type from %0, but got a floating-point literal", true)
ERROR(integer_literal_overflow, "integer literal '%0' overflows when stored into '%1'", true)
ERROR(integer_literal_expected_type, "expected type '%0', but got an integer literal", true)
ERROR(integer_literal_expected_types, "expected a type from %0, but got an integer literal", true)


OUTPUT(type_checked_binary_operator_expression_ast_0,
       "%0BinaryOperatorExpressionAST[%1](\n%indent2  token: %reset%3\n%0%indent2  left: ", false)

OUTPUT(type_checked_integer_literal_expression_ast,
       "%0TypeCheckedIntegerLiteralExpressionAST[%1](\n%indent2  token: %reset%3\n"
       "%0%indent2  number: %reset%4\n%0%indent2)", true)
OUTPUT(type_checked_floating_point_literal_expression_ast,
       "%0TypeCheckedFloatingPointLiteralExpressionAST[%1](\n%indent2  token: %reset%3\n"
       "%0%indent2  number: %reset%4\n%0%indent2)", true)
OUTPUT(type_checked_boolean_literal_expression_ast,
       "%0BooleanLiteralExpressionAST[%1](\n%indent2  token: %reset%3\n%0%indent2  value: %reset%4\n%0%indent2)", true)
OUTPUT(type_checked_variable_expression_ast,
       "%0VariableExpressionAST[%1, index: %2](\n%indent3  token: %reset%4\n%0%indent3  mutable: %reset%5\n%0%indent3)", true)

OUTPUT(type_checked_variable_declaration_ast,
       "%0VariableDeclarationAST[index: %1](\n%indent2  name: %reset%3\n%0%indent2  type: %reset%4\n"
       "%0%indent2  mutable: %reset%5\n%0%indent2  initialization: ", false)

OUTPUT(type_checked_if_expression_ast_0,
       "%0IfExpressionAST[%1](\n%indent2  token: %reset%3\n%0%indent2  if condition: ", false)
OUTPUT(type_checked_if_statement_ast_0,
       "%0IfStatementAST[%1](\n%indent2  token: %reset%3\n%0%indent2  if condition: ", false)

OUTPUT(type_checked_while_statement_ast_0,
       "%0WhileStatementAST[%1](\n%indent2  token: %reset%3\n%0%indent2  condition: ", false)

OUTPUT(type_checked_block_ast_empty, "%0BlockAST[%1](block: {})", true)
OUTPUT(type_checked_block_ast_0, "%0BlockAST[%1](\n%indent2  block: {", true)

OUTPUT(type_checked_if_body_ast_block, "%0IfBodyAST[%1](\n%indent2  keyword: %reset%3\n%0%indent2  block: ", false)
OUTPUT(type_checked_if_body_ast_expression, "%0IfBodyAST[%1](\n%indent2  keyword: %reset%3\n%0%indent2  expression: ",
       false)

OUTPUT(output, "%0", true)


//IRGen
ERROR(codegen_error, "could not generate any code: %0", true)
ERROR(error_opening_output_file, "could not open file '%0' for writing: %1", true)
ERROR(function_verification_error, "error while validating LLVM-function: %0", true)
ERROR(module_verification_error, "error while validating LLVM-module: %0", true)
ERROR(target_lookup_error, "could not lookup target '%0': %1", true)


#ifdef DIAG
#undef DIAG
#endif

#undef ERROR
#undef WARNING
#undef OUTPUT
